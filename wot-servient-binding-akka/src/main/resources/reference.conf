wot {
  servient {
    akka {
      client {
        system-name = "wot"
        akka {
          //  log-config-on-start = "on"

          # use SLF4J as logger
          # https://doc.akka.io/docs/akka/current/logging.html#slf4j
          loggers = ["akka.event.slf4j.Slf4jLogger"]
          # Options: OFF, ERROR, WARNING, INFO, DEBUG
          loglevel = "WARNING"
          logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

          actor {
            provider = "cluster"
          }

          remote {
            netty.tcp {
              hostname = "127.0.0.1"
              port = 0
            }

            artery {
              # change this to enabled=on to use Artery instead of netty
              # see https://doc.akka.io/docs/akka/current/remoting-artery.html
              enabled = off
              transport = tcp
              hostname = "127.0.0.1"
              canonical.port = 25520
            }
          }

          cluster {
            # Note - Artery uses akka:// addresses
            seed-nodes = [
              "akka.tcp://wot@127.0.0.1:2552",
              //              "akka.tcp://wot@sane1.informatik.uni-hamburg.de:2551",
              //              "akka.tcp://wot@sane1.informatik.uni-hamburg.de:2552",
            ]

            # auto downing is NOT safe for production deployments.
            # you may want to use it during development, read more about it in the docs.
            auto-down-unreachable-after = 10s

            # silence the logging of cluster events at info level
            log-info = off
          }

          extensions = ["akka.cluster.pubsub.DistributedPubSub"]
        }
      }

      server {
        system-name = "wot"
        akka {
          //  log-config-on-start = "on"

          # use SLF4J as logger
          # https://doc.akka.io/docs/akka/current/logging.html#slf4j
          loggers = ["akka.event.slf4j.Slf4jLogger"]
          # Options: OFF, ERROR, WARNING, INFO, DEBUG
          loglevel = "WARNING"
          logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

          actor {
            provider = "cluster"
          }

          remote {
            netty.tcp {
              hostname = "127.0.0.1"
              port = 2552
            }

            artery {
              # change this to enabled=on to use Artery instead of netty
              # see https://doc.akka.io/docs/akka/current/remoting-artery.html
              enabled = off
              transport = tcp
              hostname = "127.0.0.1"
              canonical.port = 25520
            }
          }

          cluster {
            # Note - Artery uses akka:// addresses
            seed-nodes = [
              "akka.tcp://wot@127.0.0.1:2552",
              //              "akka.tcp://wot@sane1.informatik.uni-hamburg.de:2551",
              //              "akka.tcp://wot@sane1.informatik.uni-hamburg.de:2552",
            ]

            # auto downing is NOT safe for production deployments.
            # you may want to use it during development, read more about it in the docs.
            auto-down-unreachable-after = 10s

            # silence the logging of cluster events at info level
            log-info = off
          }

          extensions = ["akka.cluster.pubsub.DistributedPubSub"]
        }
      }
    }

    coap {
      bind-port = 5683
      addresses = [] # example value: ["coap://127.0.0.1:5683"]
    }

    http {
      bind-host = "0.0.0.0"
      bind-port = 8080
      addresses = [] # example value: ["http://127.0.0.1:8080"]
    }

    jadex {
      client {
        jcc = false // GUI
        jccweb = false
        chat = false
        cli = false
        debugfutures = true
        //        relayaddresses = "https://sane1.informatik.uni-hamburg.de"
        //        catalogawareness.platformurls = "ws://ssp1@sane1.informatik.uni-hamburg.de:80"
        //        networknames = "SANE"
        //        networksecrets = "SANESANESANE"
      }

      server {
        jcc = false // GUI
        jccweb = false
        chat = false
        cli = false
        debugfutures = true
        //        relayaddresses = "https://sane1.informatik.uni-hamburg.de"
        //        catalogawareness.platformurls = "ws://ssp1@sane1.informatik.uni-hamburg.de:80"
        //        networknames = "SANE"
        //        networksecrets = "SANESANESANE"
      }
    }

    mqtt {
      broker = "tcp://eclipse-mosquitto:1883" # change to "localhost" to run tests locally
      # username = "myusername"
      # password = "mysecretpassword"
    }
  }
}